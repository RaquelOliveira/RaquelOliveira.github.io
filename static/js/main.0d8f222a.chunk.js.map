{"version":3,"sources":["assets/icons/github.svg","assets/icons/linkedin.svg","assets/icons/twitter.svg","profile.jpg","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","className","src","alt","href","target","github","linkedin","twitter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iICAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iLCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cCCD,SAAAC,GAAG,OAClBH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,aACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,kBAAkBC,IAAI,6DAA6DC,IAAK,kBACzGN,EAAAC,EAAAC,cAAA,OAAKE,UAAY,WACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,gBAAhB,mBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAY,uBAAf,kSAGAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,8BAEdJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,8BACdJ,EAAAC,EAAAC,cAAA,KAAGE,UAAY,6BAA6BG,KAAO,oCAAoCC,OAAS,UAChGR,EAAAC,EAAAC,cAAA,OAAKG,IAAKI,IAAQH,IAAK,kBAIzBN,EAAAC,EAAAC,cAAA,MAAIE,UAAY,8BACdJ,EAAAC,EAAAC,cAAA,KAAGE,UAAY,6BAA6BG,KAAO,IACjDP,EAAAC,EAAAC,cAAA,OAAKG,IAAOK,IAAUJ,IAAK,oBAI/BN,EAAAC,EAAAC,cAAA,MAAIE,UAAY,8BACdJ,EAAAC,EAAAC,cAAA,KAAGE,UAAY,6BAA6BG,KAAO,GAAGC,OAAS,UAC7DR,EAAAC,EAAAC,cAAA,OAAKG,IAAOM,IAASL,IAAK,uBDzBpB,MAASM,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d8f222a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.cde0c062.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.e07fcd67.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.9b4f1bf9.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.83e44ff0.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\nimport './profile.jpg';\nimport github from './assets/icons/github.svg';\nimport linkedin from './assets/icons/linkedin.svg';\nimport twitter from './assets/icons/twitter.svg';\n\nexport default App => \n<div className = 'container'> \n  <img className = 'container_image' src='https://avatars0.githubusercontent.com/u/6611514?s=460&v=4' alt= 'profile photo'></img>\n  <div className = 'content'>\n    <h1 className = 'content_name'>Raquel Oliveira</h1>\n    <p className = 'content_description'>\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries.\n    </p>\n    <ul className = 'content_social_medias_list'>\n\n      <li className = 'content_social_medias_item'>\n        <a className = 'content_social_medias_link' href = 'https://github.com/RaquelOliveira' target = '_blank'>\n        <img src={github} alt= 'github icon'/>\n        </a>\n      </li>\n\n      <li className = 'content_social_medias_item'>\n        <a className = 'content_social_medias_link' href = '' >\n          <img src = {linkedin} alt= 'linkedin icon'></img>\n        </a>\n      </li>\n\n      <li className = 'content_social_medias_item'>\n        <a className = 'content_social_medias_link' href = '' target = '_blank'>\n          <img src = {twitter} alt= 'twitter icon'></img>\n        </a>\n      </li>\n    </ul>\n\n  </div>\n</div> \n"],"sourceRoot":""}